--[[
    Roblox Smart Trade Trigger Script (Luau) - Time-Based Trading
    สคริปต์ที่เช็คเวลาจริงและทำการ trade ตามช่วงเวลาที่กำหนด
    
    เงื่อนไขการทำงาน:
    - Trade Start: 16:00 (4 โมงเย็น) GMT+7
    - Trade Stop: หลัง 17:00 (5 โมงเย็น) GMT+7
    
    วิธีการใช้งาน:
    1. เปิด Roblox Executor
    2. Copy โค้ดนี้ไปวาง
    3. กด Execute
    4. สคริปต์จะทำงานอัตโนมัติตามเวลาที่กำหนด
]]

-- Configuration
local CHECK_INTERVAL = 30 -- เช็คเวลาทุก 30 วินาที
local GMT_OFFSET = 7 -- GMT+7 สำหรับประเทศไทย
local TRADE_START_HOUR = 10 -- 10 โมงเช้า
local TRADE_END_HOUR = 13 -- 1 โมงเย็น
local MIN_COINS_THRESHOLD = 5000 -- จำนวนเหรียญขั้นต่ำสำหรับการรัน trade stop

-- Place IDs สำหรับการ join
local TRADE_START_PLACE_ID = 14119723130
local TRADE_STOP_PLACE_ID = 5233782396

-- Loadstring URLs
local TRADE_START_LOADSTRING = "https://raw.githubusercontent.com/Krittarit/sd-f96c12sd3f65sdef/refs/heads/main/tragicG"
local TRADE_STOP_LOADSTRING = "https://api.luarmor.net/files/v3/loaders/008bf699b44dd5a7d35d683c3e0805aa.lua"

-- ตัวแปรเก็บสถานะ
local current_trade_mode = nil -- "start" หรือ "stop"
local last_action_time = 0
local ACTION_COOLDOWN = 10 -- วินาที (ป้องกันการทำงานซ้ำเร็วเกินไป)

-- ใช้ HttpService สำหรับ decode JSON
local HttpService = game:GetService("HttpService")

-- ฟังก์ชันแสดงข้อความใน console
local function printToConsole(message)
    print("[" .. os.date("%H:%M:%S") .. "] " .. message)
end

-- ฟังก์ชันเช็ค place id ปัจจุบัน
local function getCurrentPlaceId()
    local success, result = pcall(function()
        return game.PlaceId
    end)
    if success then
        return result
    else
        printToConsole("❌ ไม่สามารถเช็ค place id ปัจจุบันได้: " .. tostring(result))
        return nil
    end
end

-- ฟังก์ชันเช็คเวลาปัจจุบันใน GMT+7 (ปรับปรุงใหม่)
local function getCurrentTimeGMT7()
    local success, result = pcall(function()
        -- วิธีที่ 1: ใช้ DateTime.now() ของ Roblox (ถูกต้องที่สุด)
        local utcDateTime = DateTime.now()
        local gmt7Timestamp = utcDateTime.UnixTimestamp + (GMT_OFFSET * 3600) -- +7 ชั่วโมง
        local gmt7DateTime = DateTime.fromUnixTimestamp(gmt7Timestamp)
        
        return {
            year = gmt7DateTime.Year,
            month = gmt7DateTime.Month,
            day = gmt7DateTime.Day,
            hour = gmt7DateTime.Hour,
            min = gmt7DateTime.Minute,
            sec = gmt7DateTime.Second
        }
    end)
    
    if success then
        return result
    else
        -- วิธีที่ 2: ใช้ HTTP API สำรองถ้า DateTime ไม่ทำงาน
        local api_success, api_result = pcall(function()
            local HttpService = game:GetService("HttpService")
            local response = HttpService:GetAsync("http://worldtimeapi.org/api/timezone/Asia/Bangkok")
            local data = HttpService:JSONDecode(response)
            
            -- Parse datetime string (รูปแบบ: 2024-01-01T16:30:45.123456+07:00)
            local datetime_str = data.datetime
            local year, month, day, hour, min, sec = string.match(datetime_str, "(%d+)-(%d+)-(%d+)T(%d+):(%d+):(%d+)")
            
            return {
                year = tonumber(year),
                month = tonumber(month),
                day = tonumber(day),
                hour = tonumber(hour),
                min = tonumber(min),
                sec = tonumber(sec)
            }
        end)
        
        if api_success then
            printToConsole("⚠️ ใช้ API สำรองสำหรับเวลา (DateTime ไม่ทำงาน)")
            return api_result
        else
            -- วิธีที่ 3: ใช้วิธีเดิมเป็นสำรองสุดท้าย (อาจไม่ถูกต้อง)
            local fallback_success, fallback_result = pcall(function()
                local utc_time = os.time()
                local gmt7_time = utc_time + (GMT_OFFSET * 3600)
                return os.date("*t", gmt7_time)
            end)
            
            if fallback_success then
                printToConsole("⚠️ ใช้วิธีสำรองสุดท้าย (อาจไม่ถูกต้อง 100%)")
                return fallback_result
            else
                printToConsole("❌ ไม่สามารถเช็คเวลาได้: " .. tostring(result))
                return nil
            end
        end
    end
end

-- ฟังก์ชันทดสอบความถูกต้องของเวลา
local function validateTimeAccuracy()
    local success, result = pcall(function()
        printToConsole("🔍 กำลังทดสอบความถูกต้องของเวลา...")
        
        -- ทดสอบ DateTime.now()
        local dt_success, dt_time = pcall(function()
            local utcDateTime = DateTime.now()
            local gmt7Timestamp = utcDateTime.UnixTimestamp + (GMT_OFFSET * 3600)
            local gmt7DateTime = DateTime.fromUnixTimestamp(gmt7Timestamp)
            return string.format("%02d:%02d:%02d", gmt7DateTime.Hour, gmt7DateTime.Minute, gmt7DateTime.Second)
        end)
        
        -- ทดสอบ API
        local api_success, api_time = pcall(function()
            local HttpService = game:GetService("HttpService")
            local response = HttpService:GetAsync("http://worldtimeapi.org/api/timezone/Asia/Bangkok")
            local data = HttpService:JSONDecode(response)
            local datetime_str = data.datetime
            local hour, min, sec = string.match(datetime_str, "T(%d+):(%d+):(%d+)")
            return string.format("%02d:%02d:%02d", tonumber(hour), tonumber(min), tonumber(sec))
        end)
        
        -- ทดสอบ os.time()
        local os_time = os.date("!%H:%M:%S")
        
        printToConsole("📊 ผลการทดสอบ:")
        if dt_success then
            printToConsole("   DateTime (GMT+7): " .. dt_time)
        else
            printToConsole("   DateTime: ❌ ไม่ทำงาน")
        end
        
        if api_success then
            printToConsole("   API (GMT+7): " .. api_time)
        else
            printToConsole("   API: ❌ ไม่ทำงาน")
        end
        
        printToConsole("   OS Time (UTC): " .. os_time)
        printToConsole("   📌 ควรใช้ DateTime หรือ API สำหรับความถูกต้อง")
        
        return true
    end)
    
    if not success then
        printToConsole("❌ ไม่สามารถทดสอบความถูกต้องของเวลาได้: " .. tostring(result))
    end
end

-- ฟังก์ชันแสดงเวลาในรูปแบบ string
local function formatTime(time_table)
    if not time_table then return "N/A" end
    return string.format("%02d:%02d:%02d", time_table.hour, time_table.min, time_table.sec)
end

-- ฟังก์ชันเช็คว่าอยู่ในช่วงเวลา trade start หรือไม่
local function isTradeStartTime()
    local current_time = getCurrentTimeGMT7()
    if not current_time then return false end
    
    local current_hour = current_time.hour
    
    -- Trade Start: 16:00-16:59 (4 โมงเย็น ถึงก่อน 5 โมงเย็น)
    if current_hour >= TRADE_START_HOUR and current_hour < TRADE_END_HOUR then
        return true
    else
        return false
    end
end

-- ฟังก์ชันเช็คจำนวนเหรียญปัจจุบัน
local function getCurrentCoins()
    local success, result = pcall(function()
        local players = game:GetService("Players")
        local localPlayer = players.LocalPlayer
        
        -- ลองหาข้อมูลเหรียญจากหลายที่
        local coins = nil
        
        -- วิธีที่ 1: players.Data.Coins.Value
        if players.Data and players.Data.Coins and players.Data.Coins.Value then
            coins = players.Data.Coins.Value
        -- วิธีที่ 2: LocalPlayer.Data.Coins.Value  
        elseif localPlayer.Data and localPlayer.Data.Coins and localPlayer.Data.Coins.Value then
            coins = localPlayer.Data.Coins.Value
        -- วิธีที่ 3: leaderstats
        elseif localPlayer.leaderstats and localPlayer.leaderstats.Coins and localPlayer.leaderstats.Coins.Value then
            coins = localPlayer.leaderstats.Coins.Value
        end
        
        return coins
    end)
    
    if success and result then
        return result
    else
        printToConsole("❌ ไม่สามารถเช็คจำนวนเหรียญได้: " .. tostring(result))
        return nil
    end
end

-- ฟังก์ชันเช็คว่าควรรัน trade stop หรือไม่
local function shouldRunTradeStop()
    local coins = getCurrentCoins()
    if coins == nil then
        printToConsole("⚠️ ไม่สามารถเช็คเหรียญได้ จะรัน trade stop ตามปกติ")
        return true
    end
    
    printToConsole("💰 จำนวนเหรียญปัจจุบัน: " .. tostring(coins))
    
    if coins < MIN_COINS_THRESHOLD then
        printToConsole("📉 เหรียญไม่ถึง " .. MIN_COINS_THRESHOLD .. " ต้องรัน trade stop")
        return true
    else
        printToConsole("💎 เหรียญมากกว่า " .. MIN_COINS_THRESHOLD .. " ไม่ต้องรัน trade stop")
        return false
    end
end

-- ฟังก์ชันสำหรับ join place
local function joinPlace(placeId, reason)
    local success, result = pcall(function()
        printToConsole("🚀 กำลัง join place ID: " .. placeId .. " (" .. reason .. ")")
        local TeleportService = game:GetService("TeleportService")
        TeleportService:Teleport(placeId)
        printToConsole("✅ เริ่มการ join place สำเร็จ")
    end)
    if not success then
        printToConsole("❌ ไม่สามารถ join place ได้: " .. tostring(result))
    end
end

-- ฟังก์ชันวาร์ปไปยังตำแหน่งที่กำหนด (สำหรับ place 14119723130)
local function warpToPosition()
    local success, result = pcall(function()
        local player = game.Players.LocalPlayer
        local character = player.Character
        if character then
            printToConsole("🚀 กำลังวาร์ปไปยังตำแหน่งที่กำหนด...")
            character:PivotTo(CFrame.new(Vector3.new(-2132.24, 490.66, 1106.83)))
            printToConsole("✅ วาร์ปสำเร็จไปยังตำแหน่ง (-2132.24, 490.66, 1106.83)")
        else
            printToConsole("❌ ไม่พบ Character ของ LocalPlayer")
        end
    end)
    if not success then
        printToConsole("❌ ไม่สามารถวาร์ปได้: " .. tostring(result))
    end
end

-- ฟังก์ชันรัน Trade Start Script
local function runTradeStartScript()
    local success, result = pcall(function()
        printToConsole("📜 กำลังรัน Trade Start Script...")
        loadstring(game:HttpGet(TRADE_START_LOADSTRING))()
        printToConsole("✅ รัน Trade Start Script สำเร็จ")
    end)
    if not success then
        printToConsole("❌ ไม่สามารถรัน Trade Start Script ได้: " .. tostring(result))
    end
end

-- ฟังก์ชันรัน Trade Stop Script
local function runTradeStopScript()
    local success, result = pcall(function()
        printToConsole("📜 กำลังรัน Trade Stop Script...")
        loadstring(game:HttpGet(TRADE_STOP_LOADSTRING))()
        printToConsole("✅ รัน Trade Stop Script สำเร็จ")
    end)
    if not success then
        printToConsole("❌ ไม่สามารถรัน Trade Stop Script ได้: " .. tostring(result))
    end
end

-- ฟังก์ชันเช็คและจัดการ trade mode ตามเวลา
local function checkAndManageTradeByTime()
    local success, error_msg = pcall(function()
        local current_time = getCurrentTimeGMT7()
        local current_place_id = getCurrentPlaceId()
        local now = tick()
        
        if not current_time then
            printToConsole("❌ ไม่สามารถเช็คเวลาได้")
            return
        end
        
        local time_str = formatTime(current_time)
        printToConsole("🕐 เวลาปัจจุบัน (GMT+7): " .. time_str)
        printToConsole("📍 Place ID ปัจจุบัน: " .. tostring(current_place_id))
        
        local new_trade_mode = nil
        local is_trade_time = isTradeStartTime()
        
        -- กำหนด trade mode ตามเวลา
        if is_trade_time then
            new_trade_mode = "start"
        else
            new_trade_mode = "stop"
        end
        
        -- เช็คว่ามีการเปลี่ยนแปลง trade mode หรือไม่
        if new_trade_mode ~= current_trade_mode then
            printToConsole("🔄 เปลี่ยน Trade Mode จาก '" .. tostring(current_trade_mode) .. "' เป็น '" .. new_trade_mode .. "'")
            current_trade_mode = new_trade_mode
            last_action_time = now -- Reset cooldown เมื่อเปลี่ยน mode
        end
        
        -- ทำงานตาม trade mode ปัจจุบัน
        if current_trade_mode == "start" then
            printToConsole("▶️ Trade Start Mode: เวลา " .. TRADE_START_HOUR .. ":00-" .. TRADE_END_HOUR .. ":00 GMT+7")
            
            if current_place_id == TRADE_START_PLACE_ID then
                -- อยู่ใน Trade Start Place แล้ว รัน script และวาร์ป
                if now - last_action_time > ACTION_COOLDOWN then
                    runTradeStartScript()
                    warpToPosition()
                    last_action_time = now
                else
                    printToConsole("⏳ Cooldown: รอ " .. math.ceil(ACTION_COOLDOWN - (now - last_action_time)) .. " วินาที")
                end
            elseif current_place_id == TRADE_STOP_PLACE_ID then
                -- อยู่ใน Trade Stop Place ต้อง join ไป Trade Start Place
                if now - last_action_time > ACTION_COOLDOWN then
                    printToConsole("🔄 ถึงเวลา Trade กำลังไป Trade Start Place")
                    joinPlace(TRADE_START_PLACE_ID, "Trade Start - เวลา " .. time_str)
                    last_action_time = now
                else
                    printToConsole("⏳ Cooldown: รอ " .. math.ceil(ACTION_COOLDOWN - (now - last_action_time)) .. " วินาที")
                end
            else
                -- อยู่ใน place อื่น join ไป Trade Start Place
                if now - last_action_time > ACTION_COOLDOWN then
                    printToConsole("🔄 ไม่อยู่ใน place ที่ถูกต้อง กำลังไป Trade Start Place")
                    joinPlace(TRADE_START_PLACE_ID, "Trade Start - Unknown Place")
                    last_action_time = now
                else
                    printToConsole("⏳ Cooldown: รอ " .. math.ceil(ACTION_COOLDOWN - (now - last_action_time)) .. " วินาที")
                end
            end
            
        elseif current_trade_mode == "stop" then
            printToConsole("🛑 Trade Stop Mode: นอกช่วงเวลา " .. TRADE_START_HOUR .. ":00-" .. TRADE_END_HOUR .. ":00 GMT+7")
            
            if current_place_id == TRADE_STOP_PLACE_ID then
                -- อยู่ใน Trade Stop Place แล้ว เช็คเหรียญก่อนรัน script
                if now - last_action_time > ACTION_COOLDOWN then
                    -- เช็คเงื่อนไขเหรียญ
                    if shouldRunTradeStop() then
                        runTradeStopScript()
                        last_action_time = now
                    else
                        printToConsole("💰 เหรียญเพียงพอแล้ว ไม่รัน Trade Stop Script")
                        last_action_time = now -- Reset cooldown เพื่อไม่ให้เช็คบ่อยเกินไป
                    end
                else
                    printToConsole("⏳ Cooldown: รอ " .. math.ceil(ACTION_COOLDOWN - (now - last_action_time)) .. " วินาที")
                end
            elseif current_place_id == TRADE_START_PLACE_ID then
                -- อยู่ใน Trade Start Place ต้อง join ไป Trade Stop Place
                if now - last_action_time > ACTION_COOLDOWN then
                    printToConsole("🔄 หมดเวลา Trade กำลังกลับไป Trade Stop Place")
                    joinPlace(TRADE_STOP_PLACE_ID, "Trade Stop - เวลา " .. time_str)
                    last_action_time = now
                else
                    printToConsole("⏳ Cooldown: รอ " .. math.ceil(ACTION_COOLDOWN - (now - last_action_time)) .. " วินาที")
                end
            else
                -- อยู่ใน place อื่น join ไป Trade Stop Place
                if now - last_action_time > ACTION_COOLDOWN then
                    printToConsole("🔄 ไม่อยู่ใน place ที่ถูกต้อง กำลังไป Trade Stop Place")
                    joinPlace(TRADE_STOP_PLACE_ID, "Trade Stop - Unknown Place")
                    last_action_time = now
                else
                    printToConsole("⏳ Cooldown: รอ " .. math.ceil(ACTION_COOLDOWN - (now - last_action_time)) .. " วินาที")
                end
            end
        end
        
        -- แสดงสถานะปัจจุบัน
        local next_change_time = ""
        if is_trade_time then
            next_change_time = " (หยุดเวลา " .. TRADE_END_HOUR .. ":00)"
        else
            next_change_time = " (เริ่มเวลา " .. TRADE_START_HOUR .. ":00)"
        end
        
        -- แสดงจำนวนเหรียญถ้าอยู่ในโหมด stop
        local coin_status = ""
        if current_trade_mode == "stop" and current_place_id == TRADE_STOP_PLACE_ID then
            local coins = getCurrentCoins()
            if coins then
                coin_status = " | เหรียญ: " .. coins .. "/" .. MIN_COINS_THRESHOLD
            end
        end
        
        printToConsole("📊 สถานะ: " .. (current_trade_mode == "start" and "▶️ Trading" or "🛑 Stopped") .. 
                      " | เวลา: " .. time_str .. next_change_time .. coin_status)
        printToConsole("----------------------------------------")
    end)
    
    if not success then
        printToConsole("❌ [ERROR] Error in checkAndManageTradeByTime: " .. tostring(error_msg))
    end
end

-- Main Loop
local function mainLoop()
    local success, error_msg = pcall(function()
        printToConsole("🚀 Roblox Time-Based Trade Script Started!")
        printToConsole("⏱️  Check interval: " .. CHECK_INTERVAL .. " วินาที")
        printToConsole("🌏 Time Zone: GMT+" .. GMT_OFFSET .. " (ประเทศไทย)")
        printToConsole("🕐 Action Cooldown: " .. ACTION_COOLDOWN .. " วินาที")
        printToConsole("")
        printToConsole("🎯 เงื่อนไขการทำงาน:")
        printToConsole("   ▶️ Trade Start: " .. TRADE_START_HOUR .. ":00-" .. TRADE_END_HOUR .. ":00 GMT+7 → Place ID: " .. TRADE_START_PLACE_ID)
        printToConsole("   🛑 Trade Stop:  นอกช่วงเวลาดังกล่าว → Place ID: " .. TRADE_STOP_PLACE_ID)
        printToConsole("   💰 เงื่อนไขเหรียญ: รัน Trade Stop เฉพาะเมื่อเหรียญ < " .. MIN_COINS_THRESHOLD)
        printToConsole("")
        printToConsole("💡 ระบบ Smart:")
        printToConsole("   - เช็คเวลาทุก " .. CHECK_INTERVAL .. " วินาที")
        printToConsole("   - เช็ค place id ปัจจุบันก่อน join")
        printToConsole("   - เช็คจำนวนเหรียญก่อนรัน Trade Stop")
        printToConsole("   - ป้องกันการทำงานซ้ำด้วย cooldown")
        printToConsole("   - รัน loadstring ตามเงื่อนไขอัตโนมัติ")
        printToConsole("   - วาร์ปอัตโนมัติใน Trade Start Place")
        printToConsole("")
        printToConsole("🛡️  ระบบป้องกัน:")
        printToConsole("   - ใช้ pcall ป้องกันการหยุดทำงาน")
        printToConsole("   - Cooldown " .. ACTION_COOLDOWN .. " วินาที ป้องกันการทำงานซ้ำ")
        printToConsole("   - แสดงข้อความใน console ทุกการทำงาน")
        printToConsole("----------------------------------------")
        
        -- ทดสอบความถูกต้องของเวลา
        validateTimeAccuracy()
        printToConsole("----------------------------------------")
        
        -- แสดงเวลาปัจจุบัน
        local current_time = getCurrentTimeGMT7()
        if current_time then
            printToConsole("🕐 เวลาปัจจุบัน (GMT+7): " .. formatTime(current_time))
            if isTradeStartTime() then
                printToConsole("🟢 อยู่ในช่วงเวลา Trade!")
            else
                printToConsole("🔴 อยู่นอกช่วงเวลา Trade")
            end
        end
        printToConsole("----------------------------------------")
        
        -- Main loop
        while true do
            local loop_success, loop_error = pcall(function()
                -- เช็คและจัดการ trade ตามเวลา
                checkAndManageTradeByTime()
                
                wait(CHECK_INTERVAL)
            end)
            
            if not loop_success then
                printToConsole("❌ [ERROR] Error in main loop: " .. tostring(loop_error))
                printToConsole("🔄 Restarting loop in 5 seconds...")
                wait(5)
            end
        end
    end)
    
    if not success then
        printToConsole("❌ [CRITICAL ERROR] Script failed to start: " .. tostring(error_msg))
    end
end

-- เริ่มต้นสคริปต์
mainLoop() 
